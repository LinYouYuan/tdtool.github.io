{"./":{"url":"./","title":"介绍","keywords":"","body":"介绍 更易上手的前端构建工具，基于webpack2 介绍 开始 快速上手 例子 使用 配置参数 方法 CLI 扩展 插件 教程 如何写插件 *tdtool 只能使用NPM 3及其以上的版本安装 "},"start/":{"url":"start/","title":"开始","keywords":"","body":"开始 快速上手 例子 "},"start/intro.html":{"url":"start/intro.html","title":"快速上手","keywords":"","body":"tdtool是什么 tdtool 是一个基于webpack2但是提供更简单的配置项，同时内置了许多常用配置的构建工具。 简单上手 命令工具使用 首先请确保是在yarn 2+或NPM 3+环境下运行 第一步: 安装tdtool命令行工具 yarn global add tdtool # or npm install tdtool -g 第二步：使用创建项目 tdtool create project-name react 第三步：开始开发 cd project-name && tdtool build --watch 后续：打包、测试等 tdtool build # or tdtood test 手动编写 第一步：安装tdtool yarn add tdtool -D # or npm i tdtool -D 第二步：写tdtool的配置 tdtool.config.js var Config = require('tdtool').Config var config = new Config({ entry: './src/index', dist: './dist', devServer: true }) module.exports = config.resolve() 第三步：运行 # 开始开发 tdtool build --watch # 打包 tdtool build # 也可使用 webpack 启动 webpack --config tdtool.config.js "},"start/example.html":{"url":"start/example.html","title":"例子","keywords":"","body":"一个React的项目 首先看看用tdtool创建的一个React项目，项目结构是怎样的 |-- src/ |-- entry.js |-- app.js |-- index.tpl |-- style.less |-- tdtool.config.js |-- package.json |-- yarn.lock 所需要配置 var Config = require('tdtool').Config var config = new Config({ entry: './src/entry', dist: './dist', template: './src/index.tpl', devServer: true, sourceMap: true, extends: ['react', ['less', {extractCss: true}]] }) module.exports = config.resolve() 启动 tdtool start # or webpack-dev-server --hot --inline --config tdtool.config.js "},"use/":{"url":"use/","title":"使用","keywords":"","body":"使用 配置参数 方法 CLI "},"use/config.html":{"url":"use/config.html","title":"配置参数","keywords":"","body":"配置参数 tdtool 包装了一些webpack2配置项，所提供的配置参数满足多数项目的基本需求。 entry 与 webpack2 的 entry一致，入口文件。接受 String|Array|Object 类型 // 单个入口文件 { entry: './src/index.js' } // 多入口文件但只打包成一个文件 { entry: ['./src/pageA.js', './src/pageB.js'] } // 多入口文件，且分别打包，最终生存page1.js和page2.js 文件 { entry: { page1: './src/page1.js', page2: ['./src/page2/entry1', './src/page2/entry2'] } } dist 同 output.path 项目输出路径，相对路径。 { dist: './dist' } template HTML 模版文件，使用html-webpack-plugin生成。接受 Boolean|String|Object 类型 // 自动生成一个 index.html 文件 { template: true } // 指定模板文件相对路径，生成 index.html 文件 { template: './src/index.tpl' } // 多页面指定模板文件相对路径 { template: { 'index.html': './src/index.tpl', 'admin.html': './src/admin.tpl' } } // 需要使用 html-webpack-plugin 额外的参数 { template: { 'admin.html': { filename: 'test.html', // 不指定默认使用键名 chunks: ['admin', 'vendor'], // 不同页面使用不同的 chunk template: 'src/assets/test.tpl', }, 'home.html': { template: 'src/assets/home.tpl', chunks: ['home', 'vendor'] } } } // 支持传入数组 { template: [ { filename: 'admin.html', template: 'src/assets/admin.tpl', chunks: ['admin', 'vendor'] }, { filename: 'index.html', template: 'src/assets/home.tpl', chunks: ['home', 'vendor'] } ] } target 同 target devServer 基本同 devServer。不同的是这里可以配置为node，会启动项目中的node服务，带热加载功能。 // 开启默认配置的devServer，浏览器访问http://localhost:8080 { devServer: true } // 自定义配置，以下为默认配置，target为node时此配置等同于true { devServer: { hot: true, historyApiFallback: true, inline: true } } target配置为node时，项目为nodejs服务，启动服务后需要打印日志The server is running at http://${host}:${port} publicPath 同 output.publicPath。默认为 / 。 { publicPath: '/htdocs/' } sourceMap 构建后的文件带 sourceMap，默认false { sourceMap: false } libraryTarget 同 output.libraryTarget。若target为node，则libraryTarget为commonjs2 { libraryTarget: 'umd' } moduleName 同 output.library。 { library: 'myModule' } externals 同 externals alias 同 resolve.alias filename 同 output.filename。默认值为 [name].js { filename: '[name].[hash].js' } chunkFilename 同 output.chunkFilename。默认值为 [name].chunk.js { chunkFilename: '[chunkhash].chunk.js' } minimize 指定是否压缩 js 或者 css { minimize: false } // 接受传入对象 { minimize: { js: true, css: true } } extends tdtool 默认只提供了一些基本loader，如果我们想开发react项目并且使用less样式，那么就要使用tdtool的扩展配置和依赖的功能。例如下方将引入 tdtool-react和tdtool-less插件(需要自行安装)。react插件做的事是配置jsx所需的loader及babel-loader；less插件会提供less-loader及file-loader等其他静态资源文件所需loader。 { extends: ['react', 'less'] } 如果插件是支持自定义参数的话，可以传入Object类型。例如less插件支持抽取出样式文件 { extends: { react: true, less: { extractCss: true } } } 也可以使用数组方式，数组第一个元素为插件名，第二个\b元素为插件自定义参数 { extends: ['react', ['less', {extractCss: true}]] } "},"use/api.html":{"url":"use/api.html","title":"方法","keywords":"","body":"方法 webpack2的配置中经常会去改动的是rules和plugins， 不过它们传入的是数组类型不方便修改或覆盖。所以这里还是提供了新的方法给我们操作配置。 new Config(options: Object) 设置基本配置的方法。 var Config = require('tdtool').Config var config = new Config({ entry: './src/app.js', devServer: true }) add(path: String, option: Any) 如果我们想增加(或覆盖) rule，plugin或其他配置就可以使用该方法。区分大小写。 var Config = require('tdtool').Config var config = new Config({ entry: './src/app.js', devServer: true }) config.add('rule.es6', { test: /\\.es6$/, use: ['babel-loader'] }) // 将会被翻译为 { module: { rules: [{ test: /\\.es6$/, use: ['babel-loader'] }] } } 如果是增加plugin var Config = require('tdtool').Config var config = new Config({ entry: './src/app.js', devServer: true }) config.add('plugin.Banner', new webpack.BannerPlugin(banner, options)) // 将会被翻译成 { plugins: [ new webpack.BannerPlugin(banner, options) ] } 其它的配置也可以用add增加(覆盖) config.add('output.filename', '[name].bundle.js') // 将会被翻译成 { output: { filename: [name].bundle.js } } remove(path: String) 移除预配置项 // 将 {test: /\\.es6$/,use: ['babel-loader']} 删除 config.remove('rule.es6') 默认设置的plugin包含 plugin.define plugin.UglifyJs plugin.LoaderOptions plugin.SourceMapDevTool plugin.Banner plugin.NoErrors plugin.ProgressBar plugin.HotModule resolve() 返回最终的 webpack2 配置。rule 和 plugin 的配置在 cooking 里是以 Object 的形式存储的，resolve 会将其转换成数组 var webpackConfig = coofig.resolve() // 还可以进一步去修改 webpack 配置，例如 webpackConfig.cache = true module.exports = webpackConfig "},"use/cli.html":{"url":"use/cli.html","title":"CLI","keywords":"","body":"CLI 提供了基本 create/build/start 命令，同时提供一组管理脚手架的指令。 初始化(待实现) create [generator-name] 创建项目目录并执行脚手架 # 创建一个 my-project 目录并运行 react 的脚手架 $ cooking create my-project react 开发 build 生产模式，生成最终的部署代码 $ process.env.NODE_ENV=production && tdtool build -c --config 默认读取 tdtool.config.js 配置，也可指定配置文件$ tdtool build -c webpack.config.js 接受传入文件数组，用逗号分隔$ tdtool build -c tdtool.config.dev.js,tdtool.config.server.js -w --watch 监控文件变化，自动编译$ tdtool build -w -c tdtool.config.prod.js start 开发模式，所有配置文件中需要配置且只能配置一个devServer $ tdtool start -c --config 默认读取 tdtool.config.js 配置，也可指定配置文件$ tdtool start -c webpack.config.js 接受传入文件数组，用逗号分隔$ tdtool start -c tdtool.config.dev.js,tdtool.config.server.js 插件(开发中) 多个插件用逗号分隔 import 安装脚手架 # 安装脚手架 $ tdtool import react update # 更新脚手架 $ tdtool update react remove # 删除脚手架 $ tdtool remove react list 查看安装的脚手架列表 $ tdtool list 其他(开发中) freeze 锁定package.json中依赖包的版本号，例如 >=1.0.0 -> 1.0.0 $ tdtool freeze 也可制定具体某个包 $ tdtool freeze webpack unfreeze 解锁锁package.json中依赖包的版本号，例如 1.0.0 -> >=1.0.0 $ tdtool unfreeze 也可制定具体某个包 $ tdtool unfreeze webpack "},"extension/":{"url":"extension/","title":"扩展","keywords":"","body":"扩展 插件 "},"extension/plugins.html":{"url":"extension/plugins.html","title":"插件","keywords":"","body":"插件 "},"tutorials/":{"url":"tutorials/","title":"教程","keywords":"","body":"教程 如何写插件 "},"tutorials/plugin.html":{"url":"tutorials/plugin.html","title":"如何写插件","keywords":"","body":"如何写插件 "}}