{"version":3,"sources":["../../src/cmds/build.js"],"names":["module","exports","build","options","resolve","reject","configs","config","push","split","length","wbpcs","map","configPath","process","cwd","item","existsSync","fatal","require","finished","err","stats","error","info","toString","colors","timings","watch","run"],"mappings":";;;;;;AAOA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAVA;;;;;;;AAYAA,OAAOC,OAAP,GAAiB,SAASC,KAAT,CAAeC,OAAf,EAAwB;AACvC,SAAO,sBAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAIC,UAAU,EAAd;AACA,QAAI,CAACH,QAAQI,MAAb,EAAqB;AACnBD,cAAQE,IAAR,CAAa,kBAAb;AACD,KAFD,MAEO;AACLF,gBAAUH,QAAQI,MAAR,CAAeE,KAAf,CAAqB,GAArB,CAAV;AACA,UAAI,CAACH,QAAQI,MAAb,EAAqB;AACnBJ,gBAAQE,IAAR,CAAa,kBAAb;AACD;AACF;AACD,QAAMG,QAAQL,QAAQM,GAAR,CAAY,gBAAQ;AAChC,UAAMC,aAAa,eAAKT,OAAL,CAAaU,QAAQC,GAAR,EAAb,EAA4BC,IAA5B,CAAnB;AACA,UAAI,CAAC,aAAGC,UAAH,CAAcJ,UAAd,CAAL,EAAgC;AAC9B,yBAAOK,KAAP,kBAA4BL,UAA5B;AACD;AACD,aAAOM,QAAQN,UAAR,CAAP;AACD,KANa,CAAd;;AAQA,QAAMO,WAAW,SAAXA,QAAW,CAACC,GAAD,EAAMC,KAAN,EAAgB;AAC/B,UAAID,GAAJ,EAAS;AACP,yBAAOE,KAAP,CAAaF,GAAb;AACA,eAAOhB,OAAOgB,GAAP,CAAP;AACD;;AAED,uBAAOG,IAAP,CAAYF,MAAMG,QAAN,CAAe;AACzBC,gBAAQ,IADiB;AAEzBC,iBAAS;AAFgB,OAAf,CAAZ;AAIA,aAAOvB,SAAP;AACD,KAXD;AAYA,QAAID,QAAQyB,KAAZ,EAAmB;AACjB,6BAAQjB,KAAR,EAAeiB,KAAf,CAAqB,EAArB,EAAyBR,QAAzB;AACD,KAFD,MAEO;AACL,6BAAQT,KAAR,EAAekB,GAAf,CAAmBT,QAAnB;AACD;AACF,GAnCM,CAAP;AAoCD,CArCD","file":"build.js","sourcesContent":["/**\n * @Author: Zhengfeng.Yao <yzf>\n * @Date:   2017-05-04 09:49:52\n * @Last modified by:   yzf\n * @Last modified time: 2017-05-04 09:49:55\n */\n\nimport logger from '../util/logger'\nimport fs from 'fs'\nimport path from 'path'\nimport webpack from 'webpack'\n\nmodule.exports = function build(options) {\n  return new Promise((resolve, reject) => {\n    let configs = []\n    if (!options.config) {\n      configs.push('tdtool.config.js')\n    } else {\n      configs = options.config.split(',')\n      if (!configs.length) {\n        configs.push('tdtool.config.js')\n      }\n    }\n    const wbpcs = configs.map(item => {\n      const configPath = path.resolve(process.cwd(), item)\n      if (!fs.existsSync(configPath)) {\n        logger.fatal(`Config file ${configPath} does not exist.`)\n      }\n      return require(configPath)\n    })\n\n    const finished = (err, stats) => {\n      if (err) {\n        logger.error(err);\n        return reject(err);\n      }\n\n      logger.info(stats.toString({\n        colors: true,\n        timings: true,\n      }));\n      return resolve();\n    };\n    if (options.watch) {\n      webpack(wbpcs).watch({}, finished)\n    } else {\n      webpack(wbpcs).run(finished)\n    }\n  })\n}\n"]}