{"version":3,"sources":["../../src/cmds/build.js"],"names":["module","exports","options","resolve","reject","configs","config","split","wbpcs","map","configPath","process","cwd","item","existsSync","fatal","require","info","finished","err","stats","error","toString","colors","timings","watch","run","build"],"mappings":";;;;;;;;;;;;;;AAOA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAVA;;;;;;;AAYAA,OAAOC,OAAP;AAAA,wEAAiB,iBAAqBC,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACT,sBAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACrC,kBAAIC,UAAUH,QAAQI,MAAR,CAAeC,KAAf,CAAqB,GAArB,CAAd;AACA,kBAAMC,QAAQH,QAAQI,GAAR,CAAY,gBAAQ;AAChC,oBAAMC,aAAa,eAAKP,OAAL,CAAaQ,QAAQC,GAAR,EAAb,EAA4BC,IAA5B,CAAnB;AACA,oBAAI,CAAC,aAAGC,UAAH,CAAcJ,UAAd,CAAL,EAAgC;AAC9B,mCAAOK,KAAP,kBAA4BL,UAA5B;AACD;AACD,uBAAOM,QAAQN,UAAR,CAAP;AACD,eANa,CAAd;AAOA,+BAAOO,IAAP,CAAYT,KAAZ;;AAEA,kBAAMU,WAAW,SAAXA,QAAW,CAACC,GAAD,EAAMC,KAAN,EAAgB;AAC/B,oBAAID,GAAJ,EAAS;AACP,mCAAOE,KAAP,CAAaF,GAAb;AACA,yBAAOf,OAAOe,GAAP,CAAP;AACD;;AAED,iCAAOF,IAAP,CAAYG,MAAME,QAAN,CAAe;AACzBC,0BAAQ,IADiB;AAEzBC,2BAAS;AAFgB,iBAAf,CAAZ;AAIA,uBAAOrB,SAAP;AACD,eAXD;AAYA,kBAAID,QAAQuB,KAAZ,EAAmB;AACjB,uCAAQjB,KAAR,EAAeiB,KAAf,CAAqB,EAArB,EAAyBP,QAAzB;AACD,eAFD,MAEO;AACL,uCAAQV,KAAR,EAAekB,GAAf,CAAmBR,QAAnB;AACD;AACF,aA5BK,CADS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA,WAAgCS,KAAhC;AAAA;AAAA;;AAAA,SAAgCA,KAAhC;AAAA","file":"build.js","sourcesContent":["/**\n * @Author: Zhengfeng.Yao <yzf>\n * @Date:   2017-05-04 09:49:52\n * @Last modified by:   yzf\n * @Last modified time: 2017-05-04 09:49:55\n */\n\nimport logger from '../util/logger'\nimport fs from 'fs'\nimport path from 'path'\nimport webpack from 'webpack'\n\nmodule.exports = async function build(options) {\n  await new Promise((resolve, reject) => {\n    let configs = options.config.split(',')\n    const wbpcs = configs.map(item => {\n      const configPath = path.resolve(process.cwd(), item)\n      if (!fs.existsSync(configPath)) {\n        logger.fatal(`Config file ${configPath} does not exist.`)\n      }\n      return require(configPath)\n    })\n    logger.info(wbpcs)\n\n    const finished = (err, stats) => {\n      if (err) {\n        logger.error(err);\n        return reject(err);\n      }\n\n      logger.info(stats.toString({\n        colors: true,\n        timings: true,\n      }));\n      return resolve();\n    };\n    if (options.watch) {\n      webpack(wbpcs).watch({}, finished)\n    } else {\n      webpack(wbpcs).run(finished)\n    }\n  })\n}\n"]}