{"version":3,"sources":["../src/index.js"],"names":["exports","version","require","webpackVersion","replacePath","test","_path","replace","Config","options","add","value","config","remove","resolve","extends"],"mappings":";;;;;;AAOA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;;;AAEAA,QAAQC,OAAR,GAAkBC,QAAQ,iBAAR,EAA2BD,OAA7C,C,CAdA;;;;;;;AAeAD,QAAQG,cAAR,GAAyBD,QAAQ,sBAAR,EAAgCD,OAAzD;;AAEA,IAAMG,cAAc,SAAdA,WAAc,QAAS;AAC3B,MAAI,cAAcC,IAAd,CAAmBC,KAAnB,CAAJ,EAA+B;AAC7B,WAAOA,MAAMC,OAAN,CAAc,aAAd,EAA6B,YAA7B,CAAP;AACD;AACD,MAAI,eAAeF,IAAf,CAAoBC,KAApB,CAAJ,EAAgC;AAC9B,WAAOA,MAAMC,OAAN,CAAc,cAAd,EAA8B,KAA9B,CAAP;AACD;AACD,SAAOD,KAAP;AACD,CARD;;IAUME,M,GACJ,gBAAYC,OAAZ,EAAqB;AAAA;;AAAA;;AAAA,OASrBC,GATqB,GASf,UAACJ,KAAD,EAAQK,KAAR,EAAkB;AACtB,uBAAK,MAAKC,MAAV,EAAkBR,YAAYE,KAAZ,CAAlB,EAAsCK,KAAtC;AACA;AACD,GAZoB;;AAAA,OAcrBE,MAdqB,GAcZ,UAACP,KAAD,EAAQK,KAAR,EAAkB;AACzB,yBAAO,MAAKC,MAAZ,EAAoBR,YAAYE,KAAZ,CAApB;AACA;AACD,GAjBoB;;AAAA,OAmBrBQ,OAnBqB,GAmBX,YAAM;AACd,WAAO,qBAAM,MAAKF,MAAX,CAAP;AACD,GArBoB;;AACnB,OAAKA,MAAL,GAAc,0BAAWH,OAAX,CAAd;AACA;AACA,4BAAWA,QAAQM,OAAnB,EAA4B;AAC1BL,SAAK,KAAKA,GADgB;AAE1BG,YAAQ,KAAKA;AAFa,GAA5B;AAID,C;;AAgBHb,QAAQQ,MAAR,GAAiBA,MAAjB","file":"index.js","sourcesContent":["/**\n * @Author: Zhengfeng.Yao <yzf>\n * @Date:   2017-04-25 16:26:24\n * @Last modified by:   yzf\n * @Last modified time: 2017-04-25 16:59:40\n */\n\nimport _set from 'lodash/set'\nimport _unset from 'lodash/unset'\n\nimport loadConfig from './util/load-config'\nimport loadExtend from './util/load-extend'\nimport parse from './util/parse'\n\nexports.version = require('../package.json').version\nexports.webpackVersion = require('webpack/package.json').version\n\nconst replacePath = _path => {\n  if (/^(rule)s?/ig.test(_path)) {\n    return _path.replace(/^(rule)s?/ig, 'module.$1s')\n  }\n  if (/^(plugin)s?/g.test(_path)) {\n    return _path.replace(/^(plugin)s?/g, '$1s')\n  }\n  return _path\n}\n\nclass Config {\n  constructor(options) {\n    this.config = loadConfig(options)\n    // load extends\n    loadExtend(options.extends, {\n      add: this.add,\n      remove: this.remove\n    })\n  }\n\n  add = (_path, value) => {\n    _set(this.config, replacePath(_path), value)\n    return this;\n  }\n\n  remove = (_path, value) => {\n    _unset(this.config, replacePath(_path))\n    return this\n  }\n\n  resolve = () => {\n    return parse(this.config)\n  }\n}\nexports.Config = Config\n"]}