{"version":3,"sources":["../../src/util/logger.js"],"names":["version","require","prefix","sep","gray","isTest","process","env","NODE_ENV","exports","info","msg","apply","console","log","cyan","error","message","Error","trim","red","fatal","ERROR","exit","warn","yellow","success","green"],"mappings":";;4BAAA;;;;;;;AAOA;;AACA;;;;;;AACA,IAAMA,UAAUC,QAAQ,oBAAR,EAA8BD,OAA9C;;AAEA,IAAME,sBAAoBF,OAApB,MAAN;AACA,IAAMG,MAAM,gBAAMC,IAAN,CAAW,GAAX,CAAZ;AACA,IAAMC,SAASC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,MAAxC;;AAEA;;;;;AAKAC,QAAQC,IAAR,GAAe,YAAM;AACnB,MAAMC,MAAM,aAAOC,KAAP,0BAAZ;AACAC,UAAQC,GAAR,CAAY,gBAAMC,IAAN,CAAWb,MAAX,CAAZ,EAAgCC,GAAhC,EAAqCQ,GAArC;AACD,CAHD;;AAKA;;;;;AAKAF,QAAQO,KAAR,GAAgB,mBAAW;AACzB,MAAIC,mBAAmBC,KAAvB,EAA8B;AAC5BD,cAAUA,QAAQA,OAAR,CAAgBE,IAAhB,EAAV;AACD;;AAED,MAAMR,MAAM,aAAOC,KAAP,0BAAZ;AACAC,UAAQG,KAAR,CAAc,gBAAMI,GAAN,CAAUlB,MAAV,CAAd,EAAiCC,GAAjC,EAAsCQ,GAAtC;AACD,CAPD;;AASA;;;;;AAKAF,QAAQY,KAAR,GAAgB,eAAO;AACrBZ,UAAQO,KAAR,CAAcL,GAAd;;AAEA,MAAIL,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,MAA7B,EAAqC;AACnC,UAAM,IAAIc,KAAJ,CAAU,MAAV,CAAN;AACD,GAFD,MAEO;AACLhB,YAAQiB,IAAR,CAAa,CAAb;AACD;AACF,CARD;;AAUA;;;;;AAKAd,QAAQe,IAAR,GAAe,YAAM;AACnB,MAAMb,MAAM,aAAOC,KAAP,0BAAZ;AACAC,UAAQC,GAAR,CAAY,gBAAMW,MAAN,CAAavB,MAAb,CAAZ,EAAkCC,GAAlC,EAAuCQ,GAAvC;AACD,CAHD;;AAKA;;;;;AAKAF,QAAQiB,OAAR,GAAkB,YAAM;AACtB,MAAMf,MAAM,aAAOC,KAAP,0BAAZ;AACAC,UAAQC,GAAR,CAAY,gBAAMa,KAAN,CAAYzB,MAAZ,CAAZ,EAAiCC,GAAjC,EAAsCQ,GAAtC;AACD,CAHD","file":"logger.js","sourcesContent":["/**\n * @Author: Zhengfeng.Yao <yzf>\n * @Date:   2017-04-25 16:46:26\n * @Last modified by:   yzf\n * @Last modified time: 2017-04-25 16:47:48\n */\n\nimport { format } from 'util'\nimport chalk from 'chalk'\nconst version = require('../../package.json').version\n\nconst prefix = `[tdtool@${version}]`\nconst sep = chalk.gray('-')\nconst isTest = process.env.NODE_ENV === 'test'\n\n/**\n * Log a `message` to the console\n *\n * @param {String} message\n */\nexports.info = () => {\n  const msg = format.apply(format, arguments)\n  console.log(chalk.cyan(prefix), sep, msg)\n}\n\n/**\n * Log an error `message` to the console and not exit\n *\n * @param {String} message\n */\nexports.error = message => {\n  if (message instanceof Error) {\n    message = message.message.trim()\n  }\n\n  const msg = format.apply(format, arguments)\n  console.error(chalk.red(prefix), sep, msg)\n}\n\n/**\n * Log an error `message` to the console and exit\n *\n * @param {String} message\n */\nexports.fatal = msg => {\n  exports.error(msg)\n\n  if (process.env.NODE_ENV === 'test') {\n    throw new ERROR('exit')\n  } else {\n    process.exit(1)\n  }\n}\n\n/**\n * Log a warning `message` to the console\n *\n * @param {String} message\n */\nexports.warn = () => {\n  const msg = format.apply(format, arguments)\n  console.log(chalk.yellow(prefix), sep, msg)\n}\n\n/**\n * Log a success `message` to the console\n *\n * @param {String} message\n */\nexports.success = () => {\n  const msg = format.apply(format, arguments)\n  console.log(chalk.green(prefix), sep, msg)\n}\n"]}