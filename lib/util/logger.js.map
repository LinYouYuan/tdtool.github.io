{"version":3,"sources":["../../src/util/logger.js"],"names":["version","require","prefix","sep","gray","isTest","process","env","NODE_ENV","formatTime","time","toTimeString","replace","exports","info","msg","apply","arguments","Date","console","log","cyan","error","message","Error","trim","red","fatal","ERROR","exit","warn","yellow","success","green"],"mappings":";;AAOA;;AACA;;;;;;AARA;;;;;;;AASA,IAAMA,UAAUC,QAAQ,oBAAR,EAA8BD,OAA9C;;AAEA,IAAME,sBAAoBF,OAApB,MAAN;AACA,IAAMG,MAAM,gBAAMC,IAAN,CAAW,GAAX,CAAZ;AACA,IAAMC,SAASC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,MAAxC;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACzB,SAAOA,KAAKC,YAAL,GAAoBC,OAApB,CAA4B,yBAA5B,EAAuD,IAAvD,CAAP;AACA;;AAED;;;;;AAKAC,QAAQC,IAAR,GAAe,YAAW;AACxB,MAAMC,MAAM,aAAOC,KAAP,eAAqBC,SAArB,CAAZ;AACA,MAAMP,OAAO,IAAIQ,IAAJ,EAAb;AACAC,UAAQC,GAAR,CAAY,gBAAMC,IAAN,CAAcnB,MAAd,SAAwBO,WAAWC,IAAX,CAAxB,OAAZ,EAA0DP,GAA1D,EAA+DY,GAA/D;AACD,CAJD;;AAMA;;;;;AAKAF,QAAQS,KAAR,GAAgB,UAASC,OAAT,EAAkB;AAChC,MAAIA,mBAAmBC,KAAvB,EAA8B;AAC5BD,cAAUA,QAAQA,OAAR,CAAgBE,IAAhB,EAAV;AACD;;AAED,MAAMV,MAAM,aAAOC,KAAP,eAAqBC,SAArB,CAAZ;AACA,MAAMP,OAAO,IAAIQ,IAAJ,EAAb;AACAC,UAAQG,KAAR,CAAc,gBAAMI,GAAN,CAAaxB,MAAb,SAAuBO,WAAWC,IAAX,CAAvB,OAAd,EAA2DP,GAA3D,EAAgEY,GAAhE;AACD,CARD;;AAUA;;;;;AAKAF,QAAQc,KAAR,GAAgB,UAASZ,GAAT,EAAc;AAC5BF,UAAQS,KAAR,CAAcP,GAAd;;AAEA,MAAIT,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,MAA7B,EAAqC;AACnC,UAAM,IAAIoB,KAAJ,CAAU,MAAV,CAAN;AACD,GAFD,MAEO;AACLtB,YAAQuB,IAAR,CAAa,CAAb;AACD;AACF,CARD;;AAUA;;;;;AAKAhB,QAAQiB,IAAR,GAAe,YAAW;AACxB,MAAMf,MAAM,aAAOC,KAAP,eAAqBC,SAArB,CAAZ;AACA,MAAMP,OAAO,IAAIQ,IAAJ,EAAb;AACAC,UAAQC,GAAR,CAAY,gBAAMW,MAAN,CAAgB7B,MAAhB,SAA0BO,WAAWC,IAAX,CAA1B,OAAZ,EAA4DP,GAA5D,EAAiEY,GAAjE;AACD,CAJD;;AAMA;;;;;AAKAF,QAAQmB,OAAR,GAAkB,YAAW;AAC3B,MAAMjB,MAAM,aAAOC,KAAP,eAAqBC,SAArB,CAAZ;AACA,MAAMP,OAAO,IAAIQ,IAAJ,EAAb;AACAC,UAAQC,GAAR,CAAY,gBAAMa,KAAN,CAAe/B,MAAf,SAAyBO,WAAWC,IAAX,CAAzB,OAAZ,EAA2DP,GAA3D,EAAgEY,GAAhE;AACD,CAJD","file":"logger.js","sourcesContent":["/**\n * @Author: Zhengfeng.Yao <yzf>\n * @Date:   2017-04-25 16:46:26\n * @Last modified by:   yzf\n * @Last modified time: 2017-04-25 16:47:48\n */\n\nimport { format } from 'util'\nimport chalk from 'chalk'\nconst version = require('../../package.json').version\n\nconst prefix = `[tdtool@${version}]`\nconst sep = chalk.gray('-')\nconst isTest = process.env.NODE_ENV === 'test'\n\nfunction formatTime(time) {\n return time.toTimeString().replace(/.*(\\d{2}:\\d{2}:\\d{2}).*/, '$1');\n}\n\n/**\n * Log a `message` to the console\n *\n * @param {String} message\n */\nexports.info = function() {\n  const msg = format.apply(format, arguments)\n  const time = new Date()\n  console.log(chalk.cyan(`${prefix}[${formatTime(time)}]`), sep, msg)\n}\n\n/**\n * Log an error `message` to the console and not exit\n *\n * @param {String} message\n */\nexports.error = function(message) {\n  if (message instanceof Error) {\n    message = message.message.trim()\n  }\n\n  const msg = format.apply(format, arguments)\n  const time = new Date()\n  console.error(chalk.red(`${prefix}[${formatTime(time)}]`), sep, msg)\n}\n\n/**\n * Log an error `message` to the console and exit\n *\n * @param {String} message\n */\nexports.fatal = function(msg) {\n  exports.error(msg)\n\n  if (process.env.NODE_ENV === 'test') {\n    throw new ERROR('exit')\n  } else {\n    process.exit(1)\n  }\n}\n\n/**\n * Log a warning `message` to the console\n *\n * @param {String} message\n */\nexports.warn = function() {\n  const msg = format.apply(format, arguments)\n  const time = new Date()\n  console.log(chalk.yellow(`${prefix}[${formatTime(time)}]`), sep, msg)\n}\n\n/**\n * Log a success `message` to the console\n *\n * @param {String} message\n */\nexports.success = function() {\n  const msg = format.apply(format, arguments)\n  const time = new Date()\n  console.log(chalk.green(`${prefix}[${formatTime(time)}]`), sep, msg)\n}\n"]}